{"ast":null,"code":"//import validate from '../../utils/validate'\nconst REACT_APP_API_URL = process.env.REACT_APP_API_URL;\nexport default function () {\n  return (async () => {\n    const _sess = sess,\n          token = _sess.token;\n    ionStorage;\n    const response = await fetch(\"\".concat(REACT_APP_API_URL, \"/user/pendingOrders\"), {\n      method: 'GET',\n      headers: {\n        'authorization': \"bearer \".concat(token)\n      }\n    });\n\n    if (response.status !== 201) {\n      const _ref = await response.json(),\n            error = _ref.error;\n\n      throw Error(error);\n    } else {\n      return await response.json();\n    }\n  })();\n}","map":{"version":3,"sources":["/Users/adriaarki/bootcamp/collab/skylab-bootcamp-201907/staff/adria-arquimbau/KTBO/ktbo-app/src/logic/retrieve-pending-orders/index.js"],"names":["REACT_APP_API_URL","process","env","sess","token","ionStorage","response","fetch","method","headers","status","json","error","Error"],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAGC,OAAO,CAACC,GAAR,CAAYF,iBAAtC;AAEA,eAAe,YAAY;AAGvB,SAAO,CAAC,YAAY;AAAA,kBACEG,IADF;AAAA,UACRC,KADQ,SACRA,KADQ;AAEhBC,IAAAA,UAAU;AACV,UAAMC,QAAQ,GAAG,MAAMC,KAAK,WAAIP,iBAAJ,0BAA4C;AACpEQ,MAAAA,MAAM,EAAE,KAD4D;AAEpEC,MAAAA,OAAO,EAAE;AAAC,0CAA2BL,KAA3B;AAAD;AAF2D,KAA5C,CAA5B;;AAKA,QAAIE,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAAA,mBACP,MAAMJ,QAAQ,CAACK,IAAT,EADC;AAAA,YACjBC,KADiB,QACjBA,KADiB;;AAEzB,YAAMC,KAAK,CAACD,KAAD,CAAX;AACH,KAHD,MAIK;AACD,aAAO,MAAMN,QAAQ,CAACK,IAAT,EAAb;AACH;AACJ,GAfM,GAAP;AAgBH","sourcesContent":["//import validate from '../../utils/validate'\nconst REACT_APP_API_URL = process.env.REACT_APP_API_URL\n\nexport default function () {\n\n    \n    return (async () => {\n        const { token } = sess\n        ionStorage\n        const response = await fetch(`${REACT_APP_API_URL}/user/pendingOrders`, {\n            method: 'GET',\n            headers: {'authorization': `bearer ${token}` }\n        })\n        \n        if (response.status !== 201) {\n            const { error } = await response.json()\n            throw Error(error)\n        }\n        else {\n            return await response.json()\n        }\n    })()\n}"]},"metadata":{},"sourceType":"module"}